{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Github User Documentation guide. This documentation is intended for new programmers that require a quick start guide on Github and Git.</p> <p>The following topics are covered:</p> <ul> <li>Repositories </li> <li>Github Customization </li> <li>Common Git commands</li> </ul>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>Operating System: Windows 7 or later, macOS 10.10 or later, or a modern Linux distribution</li> <li>RAM: At least 2 GB of available memory</li> <li>Disk Space: At least 500 MB of free space for Git and any repositories you plan to work with</li> </ul>"},{"location":"#software-requirements","title":"Software Requirements","text":"<ul> <li>A Web browser to access Github</li> <li>Text editor or IDE (we recommend VSCode as most images in this guide will be using it)</li> </ul>"},{"location":"#pre-requisites","title":"Pre-requisites","text":"<p>While this is a beginners guide, there are still several pre-requisites in order to follow along:</p> <ul> <li> <p>A Github account: you can sign up free with this link.</p> </li> <li> <p>Knowledge of the command prompt (Windows)/ terminal (Mac). If not, we recommend reading this tutorial for Macs or this tutorial for Windows and then returning here.</p> </li> </ul>"},{"location":"#admonitions","title":"Admonitions","text":"<p>Throughout the guide you will see the following admonitions:</p> <p>Tip</p> <p>Note</p> <p>Warning</p> <p>The purpose of these is to highlight helpful suggestions, additional information or a potential issues you may encounter. Keep an eye out for them!</p>"},{"location":"Creating%20a%20repository/","title":"Creating a Repository","text":""},{"location":"Creating%20a%20repository/#overview","title":"Overview","text":"<p>Creating a GitHub repository is one of the first things you need to do after creating a GitHub account. This section is designed to help beginners create and configure a repository.</p>"},{"location":"Creating%20a%20repository/#before-you-begin","title":"Before You Begin","text":"<p>Please login to your Github profile. If you do not have a Github account refer to the home page.</p>"},{"location":"Creating%20a%20repository/#navigating-the-landing-page","title":"Navigating the landing page","text":"<p>Once you log in to GitHub, you will be directed to the landing page. The page may appear different for each individual user but the layout will remain the same.</p> <p></p> <ol> <li> <p>Click on the + icon on the top right of the webpage: </p> <p></p> </li> <li> <p>Confirm a dropdown appeared as the one below:</p> <p></p> </li> <li> <p>Click on \"New repository\":</p> <p></p> <p>Once clicked, you should be redirected to the page seen below. Take a moment to examine the page and once ready we will go over all required fields needed to create a repository.</p> <p></p> </li> </ol>"},{"location":"Creating%20a%20repository/#configuring-the-repository","title":"Configuring the repository","text":"<ol> <li> <p>Scroll down until you see a blank text field with the name \"Repository name\":</p> <p></p> </li> <li> <p>Enter a name of your repository:</p> <p></p> </li> <li> <p>(Optional) Enter a brief description of the repository:</p> <p></p> </li> <li> <p>Select the visibility:</p> <ul> <li> <p>Click \"Public\" if you would like the repository to be viewable by everyone.</p> </li> <li> <p>Click \"Private\" if you would like the repository to be viewable by only you and the collaborators you select.</p> </li> </ul> <p></p> <p>Note</p> <p>You can always change the visibility of the repository in the future so don't worry if you're unsure of which option to select.</p> </li> <li> <p>(Optional) Add a \"README\" file:</p> <p>This file is used to provide a detailed overview of your repository.</p> <p> For more information on what a \"README\" file is, click here.</p> <p>Tip</p> <p>While this step is optional, we highly recommend adding a read.me to every repository as it is considered best practice and serves as a guide for other users.</p> </li> <li> <p>(Optional) Add a \".gitignore.\" file:</p> <p>A git ignore file is a text file that is used to specify files that you do not wish to push to your Github repository. Usually the .gitignore contains sensitive information, for example you may put a private API key that you do not want others to have access to.</p> <p> </p> <p>For more information on what a .gitignore file is click here.</p> </li> <li> <p>Scroll down to \"Choose a license\":</p> <p>A license is used to help provide guidelines to other users who wish to use your repositories in the future.</p> <p></p> </li> <li> <p>Select a license that corresponds with your goals:</p> <p>If you do not know which license to choose, selecting \"None\" will work.</p> <p> For more information on what licenses are and which will be your best fit, please click here.</p> </li> <li> <p>Click \"Create repository\" at the very bottom of the page:</p> <p></p> </li> </ol> <p>Congratulations, you have created a repository. You should be redirected to the repository page which looks like the image below.</p> <p></p>"},{"location":"Creating%20a%20repository/#conclusion-and-recap","title":"Conclusion and recap","text":"<p>By the end of this section, you will have successfully learned the following:</p> <ul> <li>How to create a new repository</li> <li>How to configure the repository.</li> </ul>"},{"location":"Customizing%20your%20Github/","title":"Customizing your Github","text":""},{"location":"Customizing%20your%20Github/#overview","title":"Overview","text":"<p>It is common to link your Github on your resume and for employers to look at it. Because of this it is important to have a well organized Github profile. This section will cover some important features and settings to enhance your profile and customize your Github experience.</p>"},{"location":"Customizing%20your%20Github/#set-your-profile-picture","title":"Set your profile picture","text":"<p>This is one of your simplest, but most effective ways to have a professional looking Github. Do not use a profile picture of your favourite Anime character or worse, a default profile picture. Upload a head shot of yourself and make sure it is high resolution.</p> <ol> <li> <p>Log in to your GitHub account.</p> </li> <li> <p>Click on your profile icon in the top right corner of the page:</p> <p></p> </li> <li> <p>Click on \"Settings\" in the dropdown menu:</p> <p></p> </li> <li> <p>Click on \"Public Profile\" in the left-hand sidebar:</p> <p></p> </li> <li> <p>Click on \"Edit\" on the right side of the page:</p> <p></p> </li> <li> <p>Click \"Upload a Photo\":</p> <p></p> </li> <li> <p>Upload a new photo or choose one from your existing repositories.</p> </li> <li> <p>Crop your photo if necessary and click \"Set new profile picture\" to save.</p> </li> </ol> <p>Note</p> <p>Steps 1-2 will be re-used to access your profile settings. Anytime steps 1-3 are referred to you can come back here to view them again.</p>"},{"location":"Customizing%20your%20Github/#edit-your-profile-bio-and-details","title":"Edit your profile bio and details","text":"<p>Adding a description to your bio is a good way for others to get to know a bit about you and your interests.</p> <ol> <li> <p>Follow steps 1-2 from above.</p> </li> <li> <p>Click on \"Your Profile\" button:</p> <p></p> </li> <li> <p>Click on the \"Edit profile\" button:</p> <p></p> </li> <li> <p>Add or edit your name, bio, company, location, and other details as desired.</p> </li> <li> <p>Click \"Save profile\" to save your changes:</p> <p></p> </li> </ol> <p>Tip</p> <p>Keep your bio description short! This isn't meant to be an autobiography, it should be a brief description.</p>"},{"location":"Customizing%20your%20Github/#choose-a-custom-theme-for-your-profile","title":"Choose a custom theme for your profile","text":"<p>Themes are a great way to stand out among others.</p> <ol> <li> <p>Follow steps 1-2 from above to access your profile settings.</p> </li> <li> <p>Click on the \"Appearance\" button:</p> <p></p> </li> <li> <p>Browse through the available themes and click on one to preview it:</p> <p></p> </li> <li> <p>Click on any color theme and it will automatically apply.</p> </li> </ol>"},{"location":"Customizing%20your%20Github/#pin-repositories-to-your-profile","title":"Pin repositories to your profile","text":"<p>Employers want to see your projects and they won't be spending a lot of time on your profile. All repositories that you wish to share need to be pinned and immediately accessible at the top of your profile.</p> <ol> <li> <p>Follow steps 1-2 from above to access your repository.</p> </li> <li> <p>Click on \"Your repositories\" button:</p> <p></p> </li> <li> <p>Go to the repository you want to pin to your profile:</p> <p></p> </li> <li> <p>Click on the \"Pin\" tab on the top right:</p> <p></p> </li> </ol> <p>Warning</p> <p>It is important to note that all pinned repositories must be made public! That means anyone who visits your profile can view them.</p>"},{"location":"Customizing%20your%20Github/#conclusion-and-recap","title":"Conclusion and recap","text":"<p>By the end of this section, you will have successfully learned the following:</p> <ul> <li>How to change your Github profile picture</li> <li>How to pin projects at the top of your profile and edit your bio</li> <li>How to personalize your Github profile with themes </li> </ul>"},{"location":"Working%20with%20Git/","title":"Working with Git","text":""},{"location":"Working%20with%20Git/#overview","title":"Overview","text":"<p>Git is a opened source version control system used alongside GitHub. This section will help you work with Git and manage your code on GitHub. You will learn the most commonly used Git commands and when to use them. Apart from the first step, this section is not intended to be followed in chronological order, rather, it should be referred to for individual commands only.</p> <p>Warning</p> <p>All commands in this section are run in the terminal window. Make sure you are in your project folder when running any commands. Refer to the homepage for more information on the terminal.</p>"},{"location":"Working%20with%20Git/#install-and-configure-git","title":"Install and configure Git","text":"<p>If you believe you have already installed git enter the following command to check:</p> <pre><code>git version\n</code></pre> <p></p> <p>Otherwise, follow the instructions below:</p> <ol> <li>Download and install Git from the official website.</li> <li> <p>Configure Git with your username and email using the terminal:</p> <pre><code>git config --global user.name \"Your Name\"\ngit config --global user.email \"your.email@example.com\"\n</code></pre> </li> <li> <p>Check that you successfully configured your account, run:</p> <p><code>git     git config --global user.name      git config --global user.email</code></p> <p></p> </li> </ol> <p>Tip</p> <p>Make sure to replace \"Your Name\" and \"your.email@example.com\" with your actual name and email address. This ensures that your github looks professional and it is easy for others to find your work.</p>"},{"location":"Working%20with%20Git/#clone-a-repository-locally","title":"Clone a repository locally","text":"<p>When we clone a repository we make a identical copy, including all folders, from the data stored on Github at the time of cloning. There are several ways to do this, the easiest is by copying the URL. </p> <ol> <li>Navigate to the GitHub repository you want to clone.</li> <li> <p>Click on the Code button and copy the URL:</p> <p></p> </li> <li> <p>Open the terminal and navigate to the location you wish to clone your repository.</p> </li> <li> <p>Run the following command:</p> <pre><code>git clone &lt;repository_url&gt;\n</code></pre> <p>By default the clone command will save the repository in a local folder under C:\\Users\\\"your name\".</p> <p></p> </li> <li> <p>Run the following command to specify a folder name </p> <pre><code>git clone &lt;repo&gt; &lt;folder name&gt;\n</code></pre> <p></p> </li> </ol>"},{"location":"Working%20with%20Git/#stage-and-commit-changes","title":"Stage and commit changes","text":"<p>Once we make a change to the code in our cloned repository. In order for these changes to be reflected on github we have to \"push them\". </p> <p>Before pushing your changes you must first stage them. This is useful as you can specify which files you wish to commit. The \".\" syntax includes all changes.</p> <ol> <li> <p>Stage the changes:</p> <p><pre><code>git add .\n</code></pre> </p> <p>Nothing will happen after this command however your changes have been staged. If you want to check which commits are currently staged run:</p> <p><pre><code>git diff --cached\n</code></pre> </p> </li> <li> <p>Commit the changes:</p> <p><pre><code>git commit -m \"Your descriptive commit message\"\n</code></pre> </p> </li> </ol> <p>Tip</p> <p>Write clear, concise, and descriptive commit messages that summarize the changes made in the commit. Make sure your commit message begins with a imperative verb. This is considered best practice as it allows for others to quickly understand the purpose of your commit.</p>"},{"location":"Working%20with%20Git/#push-changes-remotely","title":"Push changes remotely","text":"<p>Now that we have staged the changes we need to push them.</p> <ol> <li> <p>Push your changes to the remote repository, run:</p> <pre><code>git push\n</code></pre> <p></p> <p>Now all changes to your repository made locally will be reflected on Github. </p> <p></p> </li> </ol>"},{"location":"Working%20with%20Git/#pull-remote-changes","title":"Pull remote changes","text":"<p>When collaborators on your project push changes to Github you will have to pull their changes to make sure you have the most up to date code. </p> <ol> <li> <p>Update your local branch with the latest remote changes, run:</p> <pre><code>git pull\n</code></pre> <p></p> <p>Unless you had someone else make a change to your cloned repository nothing will change because there is nothing to pull. Most IDE's will create a popup that says \"all files are up to date\" if this is the case or the terminal will notify you.</p> <p></p> </li> </ol>"},{"location":"Working%20with%20Git/#merge-conflicts","title":"Merge conflicts","text":"<p>Merge conflicts occur when multiple people alter the same lines of code in a repository and then attempt to merge these changes together. Merge conflicts can be intimidating however they will be broken down into sections:</p> <ul> <li>Incoming changes </li> <li>Result of the incoming changes</li> <li>The current code </li> </ul> <p></p> <ol> <li>Choose which changes you wish to accept and which you want to reject</li> <li>Edit any file(s) to resolve the conflict</li> <li>Stage and commit the changes</li> <li>Push them back to your repository</li> </ol> <p>Tip</p> <p>Make sure to always pull any changes before beginning to work on a codebase. This will reduce the likelihood of merge conflicts occurring.</p>"},{"location":"Working%20with%20Git/#navigate-commit-history","title":"Navigate commit history","text":"<p>It is often necessary to view commit history in order to know what code has been changed.</p> <ol> <li> <p>View the commit history, run:</p> <p><pre><code>git log\n</code></pre> </p> </li> </ol>"},{"location":"Working%20with%20Git/#undo-or-modify-commits","title":"Undo or modify commits","text":"<p>If you make a mistake in your commit it is possible to undo it. The simplest way to do this is by using the command git revert. This will create a new commit which is the opposite of an existing commit. To specify which commit you wish to undo you need the id of the commit. The id can be viewed by using the git log command from the previous section.</p> <ol> <li> <p>Undo or modify commits, run:</p> <pre><code>git reset &lt;commit_id&gt;\n</code></pre> <p></p> <p>In the example above the original commit at the bottom was reverted at the top. </p> </li> </ol> <p> </p>"},{"location":"Working%20with%20Git/#conclusion-and-recap","title":"Conclusion and recap","text":"<p>By the end of this section, you will have successfully learned the following:</p> <ul> <li>How to install and configure Git</li> <li>How to clone a repository </li> <li>How to stage, commit, and push changes to GitHub</li> <li>How to navigate commit history and resolve conflicts</li> </ul> <p>Great job! You are now familiar with essential Git commands and best practices for managing your code on GitHub.</p>"},{"location":"glossary/","title":"Glossary","text":"Term Explanation Branch A parallel version of a repository that allows developers to work on different features or bug fixes simultaneously without affecting the main codebase. Clone To create a local copy of a remote repository on your computer. Commit A snapshot of changes made to files in a repository. Each commit has a unique ID and stores information about the changes made, author, and timestamp. Fork A personal copy of a repository that allows you to freely experiment with changes without affecting the original project. Git A distributed version control system used to track changes in source code during software development. Git allows multiple developers to collaborate on a project and maintain a complete history of changes. GitHub A web-based platform for version control and collaboration using Git. It provides features such as code hosting, issue tracking, and pull requests. Merge The process of combining changes from one branch into another, typically from a feature or bug fix branch back into the main branch. Pull Request A request to merge changes from one branch into another on GitHub. Pull requests allow for code review and discussion before the changes are merged. Remote A version of your repository that is hosted on a server, typically on a platform like GitHub. A remote repository can be cloned and synchronized with your local repository. Repository (repo) A container for a project's files, including its complete history of changes. It can be hosted locally on your computer or remotely on a server. Staging The process of marking changes in your working directory to be included in the next commit. Upstream The main or original repository from which you forked or cloned your repository. It is considered the primary source of updates and changes."},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#common-errors","title":"Common Errors","text":"<p>This section will go over some of the common errors you may encounter while following this guide or using Github and Git in general. For more advanced errors we recommend the official Github documentation here.</p>"},{"location":"troubleshooting/#issue-repository-not-found-or-404-error","title":"Issue: Repository not found or 404 error","text":"<p>This error occurs when trying to access a repository for the following reasons:</p> <ol> <li>The repository has been deleted or renamed </li> <li>You do not have the correct permissions</li> <li>The wrong URL for the repository was entered </li> </ol>"},{"location":"troubleshooting/#issue-unable-to-push-or-pull-changes","title":"Issue: Unable to push or pull changes","text":"<p>If you are not able to push or pull changes from a repository it can be for the following reasons:</p> <ol> <li>Network issues: ensure that you have a stable internet connection</li> <li>Authentication problems: ensure that you have the required permissions and SSH key (AKA authentication token) is configured correctly. Read more about authentication tokens here.</li> <li>Repository issue: ensure that the repository still exists</li> </ol>"},{"location":"troubleshooting/#issue-fatal-not-a-git-repository","title":"Issue: \"Fatal: not a git repository\"","text":"<p>This error occurs if you are attempting to run git commands but are not in the correct repository location on your computer. To resolve this:</p> <ol> <li>Navigate to the correct directory using CD to change directories</li> <li> <p>If you are unsure of the path to the directory locate the repository on your computer and look at the top of the folder as seen below:</p> <p></p> </li> </ol> <p>If the error persists your files may be corrupted. In this case your best option is to clone the repository again. </p>"}]}